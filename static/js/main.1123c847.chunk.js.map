{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","TodoLisItem","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","App","setTodos","nextId","useRef","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAYeA,G,YATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACI,sBAAKC,UAAU,eAAf,UACG,qBAAKA,UAAU,YAAf,uCACC,qBAAKA,UAAU,UAAf,SAA0BD,S,OCwBvBE,G,MA3BI,SAAC,GAAmB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,KAG5BC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACnB,IAEGM,EAAWH,uBAAa,SAAAC,GAC1BN,EAASE,GACTC,EAAS,IAETG,EAAEG,mBAEN,CAACT,EAAUE,IAGX,OACI,uBAAMJ,UAAU,aAAaU,SAAUA,EAAvC,UACI,uBAAOE,YAAY,sDACnBR,MAAOA,EAAOE,SAAUA,IACxB,iCACI,cAAC,IAAD,W,gBCDDO,G,MAfK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC3BC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,KAAMC,EAAYL,EAAZK,QAClB,OACI,sBAAKnB,UAAU,eAAf,UACI,sBAAKA,UAAaoB,IAAI,WAAY,CAAED,YAAYE,QAAS,kBAAML,EAASC,IAAxE,UACKE,EAAU,cAAC,IAAD,IAAgB,cAAC,IAAD,IAC3B,qBAAKnB,UAAU,OAAf,SAAuBkB,OAE3B,qBAAKlB,UAAU,SAASqB,QAAS,kBAAMN,EAASE,IAAhD,SACI,cAAC,IAAD,WCADK,G,MAdE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOR,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,SAChC,OACI,qBAAKhB,UAAU,WAAf,SACKuB,EAAMC,KAAI,SAAAV,GAAI,OACX,cAAC,EAAD,CACAA,KAAMA,EAENC,SAAUA,EACVC,SAAUA,GAFLF,EAAKG,WC6CXQ,MAjDf,WAAgB,IAAD,EACatB,mBAAS,CACjC,CACEc,GAAI,EACJC,KAAM,iEACNC,SAAS,GAEX,CACEF,GAAI,EACJC,KAAM,uEACNC,SAAS,GAEX,CACEF,GAAI,EACJC,KAAM,mEACNC,SAAS,KAfA,mBACNI,EADM,KACCG,EADD,KAmBPC,EAASC,iBAAO,GAEhB1B,EAAWK,uBAAa,SAAAW,GAC5B,IAAMJ,EAAO,CACXG,GAAIU,EAAOE,QACXX,OACAC,SAAQ,GAEVO,EAASH,EAAMO,OAAOhB,IACtBa,EAAOE,SAAW,IAClB,CAACN,IAEGR,EAAWR,uBAAa,SAAAU,GAC5BS,EAASH,EAAMQ,QAAO,SAAAjB,GAAI,OAAIA,EAAKG,KAAMA,QACzC,CAACM,IAEGP,EAAWT,uBAAa,SAAAU,GAC5BS,EACEH,EAAMC,KAAI,SAAAV,GAAI,OACZA,EAAKG,KAAOA,EAAZ,2BAAqBH,GAArB,IAA2BK,SAAUL,EAAKK,UAAWL,QAExD,CAACS,IACJ,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAYrB,SAAUA,IACtB,cAAC,EAAD,CAAUqB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,QCtCxCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1123c847.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoTemplate.scss'\n\nconst TodoTemplate = ({ children }) => {\n    return (\n        <div className=\"TodoTemplate\">\n           <div className=\"app-title\">일정 관리</div> \n            <div className=\"content\">{children}</div> \n        </div>\n    );\n};\n\nexport default TodoTemplate;","import React, { useState, useCallback } from 'react';\nimport {MdAdd} from 'react-icons/md';\nimport './TodoInsert.scss';\n\nconst TodoInsert = ( { onInsert }) => {\n    const [value, setValue] = useState('');\n\n    const onChange = useCallback(e => {\n        setValue(e.target.value);\n    }, []);\n\n    const onSubmit = useCallback( e => {\n        onInsert(value);\n        setValue(''); //value값 초기화\n\n        e.preventDefault();\n    },\n    [onInsert, value],\n    );\n\n    return (\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\n            <input placeholder=\"할 일을 입력하세요.\"\n            value={value} onChange={onChange}></input>\n            <button>\n                <MdAdd/>\n            </button>\n        </form>\n    );\n};\n\nexport default TodoInsert;","import React from 'react';\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoLisItem = ({ todo, onRemove, onToggle }) => {\r\n    const { id, text, checked } = todo;\r\n    return (\r\n        <div className=\"TodoListItem\">\r\n            <div className= { cn ('checkbox', { checked })} onClick={() => onToggle(id)}>\r\n                {checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}\r\n                <div className=\"text\">{text}</div>\r\n            </div>\r\n            <div className=\"remove\" onClick={() => onRemove(id)}>\r\n                <MdRemoveCircleOutline />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoLisItem;","import React from 'react';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todos, onRemove,onToggle }) => {\r\n    return (\r\n        <div className=\"TodoList\">\r\n            {todos.map(todo => (\r\n                <TodoListItem \r\n                todo={todo} \r\n                key={todo.id} \r\n                onRemove={onRemove} \r\n                onToggle={onToggle}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, { useState, useRef, useCallback } from 'react';\nimport './App.css';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: '리액트의 기초 알아보기',\n      checked: true,\n    },\n    {\n      id: 2,\n      text: '컴포넌트 스타일링해 보기',\n      checked: true,\n    },\n    {\n      id: 3,\n      text: '일정 관리 앱 만들어 보기',\n      checked: false,\n    },\n  ])\n  //고유 값으로 사용될 id\n  const nextId = useRef(4);\n\n  const onInsert = useCallback( text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked:false,\n    };\n    setTodos(todos.concat(todo));\n    nextId.current += 1;\n  },[todos]);\n  \n  const onRemove = useCallback( id => {\n    setTodos(todos.filter(todo => todo.id !==id));\n  },[todos]);\n\n  const onToggle = useCallback( id => {\n    setTodos(\n      todos.map(todo =>\n        todo.id === id ? {...todo, checked: !todo.checked} : todo,),\n    );\n  }, [todos]);\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert}/>\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n    </TodoTemplate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}